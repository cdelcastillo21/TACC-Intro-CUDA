module cuda_module
  use cudafor
  contains
  
  ! CUDA kernel to square each element of an array
  attributes(global) subroutine squareArray(d_in, d_out, n)
    implicit none
    integer, intent(in) :: n
    integer, device, intent(in) :: d_in(n)
    integer, device, intent(out) :: d_out(n)
    integer :: tid
    
    ! Calculate the global thread ID
    tid = (blockIdx%x - 1) * blockDim%x + threadIdx%x
    
    ! Make sure we don't go out of bounds
    if (tid <= n) then
      d_out(tid) = d_in(tid) * d_in(tid)
    end if
  end subroutine squareArray
end module cuda_module

program square_fortran
  use cudafor
  use cuda_module
  implicit none
  
  ! Array size
  integer, parameter :: N = 10000
  
  ! Host arrays
  integer, allocatable :: h_in(:), h_out(:)
  
  ! Device arrays
  integer, device, allocatable :: d_in(:), d_out(:)
  
  ! Local variables
  integer :: i, istat
  type(dim3) :: blocks, threads
  logical :: pass = .true.
  
  ! Allocate host arrays
  allocate(h_in(N), h_out(N))
  
  ! Initialize input array on host
  do i = 1, N
    h_in(i) = i - 1  ! 0-based for consistency with C version
  end do
  
  ! Allocate device arrays
  allocate(d_in(N), d_out(N))
  
  ! Copy input array from host to device
  d_in = h_in
  
  ! Set up execution configuration
  threads = dim3(256, 1, 1)
  blocks = dim3((N + threads%x - 1) / threads%x, 1, 1)
  
  ! Launch the kernel
  write(*,*) 'CUDA kernel launch with ', blocks%x, ' blocks of ', threads%x, ' threads'
  call squareArray<<<blocks, threads>>>(d_in, d_out, N)
  istat = cudaGetLastError()
  if (istat /= cudaSuccess) then
    write(*,*) 'CUDA Error: ', cudaGetErrorString(istat)
    stop
  end if
  
  ! Wait for GPU to finish
  istat = cudaDeviceSynchronize()
  
  ! Copy result back to host
  h_out = d_out
  
  ! Verify results
  do i = 1, N
    if (h_out(i) /= h_in(i) * h_in(i)) then
      write(*,*) 'Verification failed at index ', i-1, ': expected ', h_in(i) * h_in(i), ', got ', h_out(i)
      pass = .false.
      exit
    end if
  end do
  
  if (pass) write(*,*) 'Array squaring completed successfully!'
  
  ! Print first 10 elements for verification
  write(*,*) 'First 10 elements of squared array:'
  do i = 1, 10
    write(*,*) (i-1), 'Â² = ', h_out(i)
  end do
  
  ! Deallocate device arrays
  deallocate(d_in, d_out)
  
  ! Deallocate host arrays
  deallocate(h_in, h_out)
  
end program square_fortran
